global:
  oauth2:
    base-uri: /oauth2/authorization #FE 소셜 로그인 요청할 때 사용할 주소값.
    # 플랫폼과 통신을 3번 정도 하는데 각 통신들이 하나의 작업을 위한 트랜잭션이라는 것을
    # 연결시키기 위해 쿠키를 사용한다.
    # OAuth2UserRequest 여기서 쿠키를 받아옴.

    # FE와 아래 이름 맞출것.
    authorization-request-cookie-name: oauth2_auth_request
    redirect-uri-param-cookie-name: redirect_uri
    cookie-expiry-second: 180
    authorized-redirect-uris: # FE에서 요청할 redirect uri 주소 지정
      - http://localhost:8080/fe/redirect
      - http://192.168.0.144:5221/fe/redirect
      - http://112.222.157.156:5221/fe/redirect

const:
  default-page-size: 20

file:
  directory: D:/ksj/download/greengramjpa

jwt:
  issuer: green@green.kr #아무거나 써도 됨
  secret-key: ${JWT_SECRET_KEY}

mybatis:
  configuration:
    map-underscore-to-camel-case: true
  mapper-locations: mappers/**/*.xml

spring:
  application:
    name: GreenGramVer3
  config:
    import: optional:file:.env #optional은 혹시 .env 파일이 없더라도 컴파일 에러가 나지 않게끔, file : 파일을 import 처리하겠다.
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: jdbc:log4jdbc:mariadb://${DEFAULT.DB_URL}
    username: ${DEFAULT.USERNAME}
    password: ${DEFAULT.PASSWORD}
  jackson:
    default-property-inclusion: non_null  #응답 JSON을 만들때 null인 속성은 제외한다.
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SOCIAL.GOOGLE.CLIENT_ID}
            client-secret: ${SOCIAL.GOOGLE.SECRET}
            scope: #액세스시 요청하여 받을 값 리스트, 각 기업마다 맞춰야함.
              - email
              - profile
          kakao:
            client-id: ${SOCIAL.KAKAO.CLIENT_ID}  #앱설정>앱키>REST API 키
            client-secret: ${SOCIAL.KAKAO.SECRET}  #카카오로그인>보안>Client Secret
            client-authentication-method: client_secret_post #client-id, client-secret이 쿼리스트링으로 날아가야함
            authorization-grant-type: authorization_code #권한 부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
              # baseUrl: 서버가 돌아가고 있는 host URL
              # action: login
              # registrationId: kakao
            # 결과: localhost:8080/login/oath2/code/kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email
          naver:
            client-id: ${SOCIAL.NAVER.CLIENT_ID}
            client-secret: ${SOCIAL.NAVER.SECRET}
            client-authentication-method: client_secret_post #client-id, client-secret이 쿼리스트링으로 날아가야함
            authorization-grant-type: authorization_code #권한 부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
              # baseUrl: 서버가 돌아가고 있는 host URL
            # action: login
            # registrationId: kakao
            # 결과: localhost:8080/login/oath2/code/kakao
            scope:
              - name
              - email
              - profile_image
              - nickname
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #kakao 인증처리 URL
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header #default값이 header AccessToken 어디에 담아서 보낼지 설정(header, form, query)
            user-name-attribute: id #유일값 속성명
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #naver 인증처리 URL
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response #유일값 속성명
  jpa:
    database: mysql
    hibernate:
      #ddl-auto: create #entity를 서버 기동때마다 drop 후 create한다.
      ddl-auto: update  #entity가 없으면 create, 기존에 존재하는 것은 컬럼을 새롭게 추가하는 것만 반영.
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        format_sql: true #로그 찍을 때 보기 편하게 포맷팅 #출력을 보기 편하게
        order_updates: true #JPA Batch 작업 , 모았다가 한번에 작업하는 것.
    show-sql: true #JPA가 만든 쿼리문 로그에 출력

  servlet:
    multipart:
      max-file-size: 15MB

springdoc:
  swagger-ui:
    default-model-expand-depth: 10
    display-request-duration: true
    groups-order: asc
    operations-sorter: method
    path: /swagger
    tags-sorter: alpha
  cache:
    disabled: true
